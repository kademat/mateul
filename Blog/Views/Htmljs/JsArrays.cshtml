@{
    ViewBag.Title = "JSTables";
    Layout = "~/Views/Shared/_LayoutInside.cshtml";
}
<h1>Java Script Arrays</h1>
<p>
    In this coding example I want to show you a few examples of JavaScript arrays. The expected result of this coding example look like this:
    <iframe class="code" src="//jsfiddle.net/su9b56gx/embedded/" allowfullscreen="allowfullscreen"></iframe>
    You can click on the buttion in top right corner named "Edit in JSFiddle" if you want to play with the code and see the results.
</p>
<h1>Basic arrays</h1>
<h2>Why we need arrays?</h2>
<p>
    Let's say that we want to have... Something interesting - like a list of your facebook friends. You can put the names of your friends
    in variables like this:
</p>
<pre class="brush: js">
    var friend1 = "Joe Dale";
    var friend2 = "Johny Bravo";
    var friend3 = "Jimmy Strong";
    var friend4 = "Jack Daniels";
    var friend5 = "Johny Alfen";
    //of course you can have more friends - 5 for this example will be ok
</pre>
<p>
    Of course it's valid code. But when we want to print a list of your friends it could be a little problematic:
</p>
<pre class="brush: js">
    var friend1 = "Joe Dale";
    var friend2 = "Johny Bravo";
    var friend3 = "Jimmy Strong";
    var friend4 = "Jack Daniels";
    var friend5 = "Johny Alfen";
    //of course you can have more friends - 5 for this example will be ok
    console.log(friend1 + " " + friend2 + " " + friend3 + " " + friend4 + " " + friend5);
</pre>
<p>
    If you want to test this code you can click <kbd>F12</kbd> click on <kbd>Console</kbd> pastle the above code and see the results. The results of that code are:
</p>
<pre>Joe Dale Johny Bravo Jimmy Strong Jack Daniels Johny Alfen</pre>
<p>
    But what happens when we remove one friend?

    <pre class="brush: js">
    var friend1 = "Joe Dale";
    var friend2 = "Johny Bravo";
    var friend3 = "Jimmy Strong";
    //var friend4 = "Jack Daniels"; - removed - he's not our friend anymore
    var friend5 = "Johny Alfen";
    //of course you can have more friends - 5 for this example will be ok
    console.log(friend1 + " " + friend2 + " " + friend3 + " " + friend4 + " " + friend5);
</pre>
    Then we will get an error in output:

    <pre class="error">Uncaught ReferenceError: friend4 is not defined</pre>
</p>




<p>
    We are going to use the console to generate the output of the code.
</p>
<p>
    <b>The problem:</b> we want to save a list of people names in the code. We can of course do it like that:
</p>



<p>
    Ok, but what if you have to add more people? And? Oh yes, we should use capital letter - because we have a list of names. After a few changes the
    code look like this:
</p>



<p>It is starting to be pretty big. And it's easy to make a mistake. Let's produce the code where the names will be sorted in alphabetic order:</p>


<p>
    Uff... Done... What a mess in code is generated! It's really hard to add something. But here we have the tables! Let's create a table!.
</p>

<h2>Table in JS</h2>
<p>
    It's really easy to create the table. You can just type this code:
</p>

<p>
    If you want to log an element you can just type the number of element in [], but remember, that numbers starts with 0
</p>


<p>Now you have the list of names. Of course there is easier way to do it, because you can use foreach and show to user all elements that you have in table:</p>



<h1>Two-dimensions tables</h1>
<h2>How it works</h2>
<p>
    Let's say that we want to have two-dimensions table to store the people inside. We can start with creating a simple table like this:

    <pre class="brush: js">
		var people = [];
    </pre>
    And it's all? Yes! For now we could on the first element of the table create a new table just like here:
    <pre class="brush: js">
		var people = [];
		people[0] = [];
    </pre>
    What doest it mean? We have another table at the element nr 0. So we can add elements at position [0][0]!
    <pre class="brush: js">
		var people = [];
		people[0] = [];
		people[0][0] = "Jan";
    </pre>
    It's a simple example how we could use the two-dimensions tables. Anyway you can use this approach to create 3 or more
    dimensions! When you want to print from the table you can just use:
    <pre class="brush: js">
		var people = [];
		people[0] = [];
		people[0][0] = "Jan";
		document.write("First person name : " + people[0][0]);
	</pre>
    What gives you output:
    <pre>First person name : Jan</pre>
</p>
<h2>Test it in the code!</h2>
<p>
    <iframe class="code" src="//jsfiddle.net/7z02a8cj/embedded/"></iframe>

    As you can see using the two-dimentional tables is not that hard in JS :)
</p>
	In my oppinion the best way to learn is to do some examples by yourself, so I created a bigger example of the code that you can modify.
	Here you can find an example:
<h1>Functions</h1>
<h2>Basic knowledge about functions</h2>
<p>
    Let's say that we want to create a createProgrammer function (because we need them more :) ):
    <pre class="brush: js">
		function createProgrammer()
		{
		}
    </pre>
    Ok, so now we need to consider what our function should get as parametrs. Let's say that we need a name of the programmer and the lines of code.
    Remember, that paramerts that we send to the function can't have white spaces, so we can use parametr like linesOfCode.
    <pre class="brush: js">
		function createProgrammer(name, linesOfCode)
		{
		}
    </pre>
    So now let's say that we want a constructor, that creates programmers:
</p>
<h2>Let's try to do some more!</h2>
<p>
    <pre class="brush: js">
		function createProgrammer(name, linesOfCode)
		{
			return 
			{
				name: name,
				linesOfCode: linesOfCode
			}
		}
    </pre>
    So now let me create a new programmer:
    <pre class="brush: js">
		var programmer1 = createProgrammer("Mateusz", 548654);
	</pre>
    But sometimes we could need some calculations in our body of the function. We could do it like this:
    <pre class="brush: js">
		function createProgrammer(name, linesOfCode)
		{
			return 
			{
				name: name,
				linesOfCode: linesOfCode,
		        getKiloLinesOfCode: function() 
				{
					return Math.round(this.linesOfCode / 1000);
				}
			}
		}
    </pre>
    In this case we should remember to add "()" when we would like to use that function like below:
    <pre class="brush: js">
		programmer1.getKiloLinesOfCode()
    </pre>
    We have also an option to use other object of the function - for example for sum of the lines of code. We could do it like this:
    <pre class="brush: js">
		function createProgrammer(name, linesOfCode)
		{
			return 
			{
				name: name,
				linesOfCode: linesOfCode,
		        getKiloLinesOfCode: function() 
				{
					return Math.round(this.linesOfCode / 1000);
				},
				getSumLinesOfCode: function (anotherProgrammer) 
				{
					return parseInt(anotherProgrammer.linesOfCode, 10) + parseInt(this.linesOfCode, 10);
				}
			}
		}
    </pre>
    We look into the object named anotherProgrammer and we select from them parametr named linesOfCode and we sum it with current programmer
    lines of code. This function returns sum of the lines of code in decimal system (what is said by second argument of the function parseInt).
    When we want to sum the programmers lines of code we need to create 2 programmers and use the function getSumLinesOfCode:
    <pre class="brush: js">
		var programmer1 = createProgrammer("Mateusz", 548654);
		var programmer2 = createProgrammer("Jan", 1232222);
		var sumLinesOfCode = programmer1.getSumLinesOfCode(programmer2);
    </pre>
</p>
<h2>Make it yourself!</h2>
<p>
    <iframe class="code" src="//jsfiddle.net/su9b56gx/embedded/" allowfullscreen="allowfullscreen"></iframe>
</p>
	So, as always, I recomend to try it yourself - edit the code and see how it works!

